import React from 'react'
import {
  useTable,
  usePagination,
  useResizeColumns,
  useBlockLayout
} from 'react-table'
import './items.css'
import { dynamoDbScan } from '../asyncData/dynamoDb'
import { Icon, Button } from 'antd'
import ButtonGroup from 'antd/lib/button/button-group'

function Table({
  columns,
  data,
  fetchData,
  loading,
  pageCount: controlledPageCount
}) {
  // Use the state and functions returned from useTable to build your UI
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    canPreviousPage,
    canNextPage,
    nextPage,
    previousPage,
    //setPageSize,
    state: { pageIndex, pageSize }
  } = useTable(
    {
      columns,
      data,
      initialState: { pageIndex: 0, pageSize: 50 },
      manualPagination: true,
      pageCount: controlledPageCount
    },
    usePagination,
    useBlockLayout,
    useResizeColumns
  )

  React.useEffect(() => {
    fetchData({ pageIndex, pageSize })
  }, [fetchData, pageIndex, pageSize])

  return (
    <>
      <div className="pagination">
        <ButtonGroup>
          <Button icon="plus" />
          <Button icon="setting" />
          <Button icon="redo" />
        </ButtonGroup>

        <div>
          {loading && <span>Loading... </span>}

          {canPreviousPage && (
            <Icon type="left" onClick={() => previousPage()} />
          )}
          <span>
            {`Viewing ${page.length *
              (pageIndex + 1)} to ${controlledPageCount * pageSize} items`}
          </span>
          {canNextPage && <Icon type="right" onClick={() => nextPage()} />}
        </div>
      </div>
      <div className="items-wrapper">
        <div {...getTableProps()} className="table">
          <div className="tablehead-wrapper">
            <div className="tablehead-background"></div>
            {headerGroups.map(headerGroup => (
              <div
                {...headerGroup.getHeaderGroupProps()}
                className="tr tablehead"
              >
                {headerGroup.headers.map(column => (
                  <div {...column.getHeaderProps()} className="th">
                    {column.render('Header')}
                    {/* Use column.getResizerProps to hook up the events correctly */}
                    <div
                      {...column.getResizerProps()}
                      className={`resizer ${
                        column.isResizing ? 'isResizing' : ''
                      }`}
                    />
                  </div>
                ))}
              </div>
            ))}
          </div>
          <div {...getTableBodyProps()}>
            {page.map((row, i) => {
              prepareRow(row)
              return (
                <div className="tr-wrapper">
                  <div {...row.getRowProps()} className="tr tablebody">
                    {row.cells.map(cell => {
                      return (
                        <div {...cell.getCellProps()} className="td">
                          {cell.render('Cell')}
                        </div>
                      )
                    })}
                  </div>
                </div>
              )
            })}
          </div>
        </div>
      </div>
    </>
  )
}

export function Items() {
  const [columns, setColumns] = React.useState([])
  const [data, setData] = React.useState([])
  const [loading, setLoading] = React.useState(false)
  const [pageCount, setPageCount] = React.useState(0)

  const fetchData = React.useCallback(async ({ pageSize, pageIndex }) => {
    setLoading(true)

    const startRow = pageSize * pageIndex
    const endRow = startRow + pageSize

    const { items, count, columns } = await dynamoDbScan({ startRow, endRow })
    setData(items)
    setColumns(
      Object.keys(columns).map(column => {
        const appPx = columns[column] * 12

        return {
          Header: column,
          accessor: column,
          width: appPx < 70 ? 70 : appPx > 400 ? 400 : appPx
        }
      })
    )

    // Your server could send back total page count.
    // For now we'll just fake it, too
    setPageCount(Math.ceil(count / pageSize))

    setLoading(false)
  }, [])

  return (
    <Table
      columns={columns}
      data={data}
      fetchData={fetchData}
      loading={loading}
      pageCount={pageCount}
    />
  )
}
